{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.5\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport DMX from 'dmx';\r\n\r\n\r\nimport type {CurrentStateValue, StateChangeListener,  StateEventRegistration} from \"./lib/dmx.d.ts\";\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n/*\r\n// Augment the adapter.config object with the actual types\r\ndeclare global {\r\n\t// eslint-disable-next-line @typescript-eslint/no-namespace\r\n\tnamespace ioBroker {\r\n\t\tinterface AdapterConfig {\r\n\t\t\t// Define the shape of your options here (recommended)\r\n\t\t\tdevice: string;\r\n\t\t\tdriver: string;\r\n\t\t\tchannels_used : number;\r\n\r\n\t\t}\r\n\t}\r\n\r\n}\r\n*/\r\nclass Nodedmx2 extends utils.Adapter {\r\n\tprivate mydmx?: any;\r\n\tprivate existingObjects: Record<string, ioBroker.Object> = {};\r\n\tprivate currentStateValues: Record<string, CurrentStateValue> = {};\r\n\t// private operatingModes: OperatingModes = {};\r\n\tprivate stateChangeListeners: Record<string, StateChangeListener> = {};\r\n\tprivate stateEventHandlers: Record<string, StateEventRegistration[]> = {};\r\n\r\n\tprivate cacheEvents = false;\r\n\tprivate eventsCache: Record<string, any> = {};\r\n\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t// dirname: __dirname.indexOf('node_modules') !== -1 ? undefined : __dirname + '/../',\r\n\t\t\t...options,\r\n\t\t\tname: \"nodedmx\",\r\n\t\t});\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n\t\t// this.on(\"message\", this.onMessage.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\t// Reset the connection indicator during startup\r\n\t\tthis.setState(\"info.connection\", false, true);\r\n\r\n\t\tthis.log.info(`Adapter state Ready`);\r\n\t\t// Initialize your adapter here\r\n\r\n\t\tthis.mydmx = new DMX();\r\n\r\n\t\t// var universe = dmx.addUniverse('demo', 'enttec-open-usb-dmx', '/dev/cu.usbserial-6AVNHXS8')\r\n\t\t// const universe = dmx.addUniverse('demo', 'socketio', null, {port: 17809, debug: true});\r\n\t\t// const universe = dmx.addUniverse('myusb', 'dmx4all', '/dev/usb1', 'null');\r\n\t\t// const universe = dmx.addUniverse(\"myusb\", \"dmx4all\", \"/dev/ttyACM0\", \"null\");\r\n\r\n\t\t// const universe = this.mydmx.addUniverse(\"myusb\", \"dmx4all\", \"/dev/ttyACM0\", \"null\");\r\n\t\t// const universe = this.mydmx.addUniverse(\"myusb\", this.config.driver, this.config.device, \"null\");\r\n\t\tthis.mydmx.universe = this.mydmx.addUniverse(\"myusb\", this.config.driver, this.config.device, \"null\");\r\n\t\tthis.log.info(`Universe erzeugt`);\r\n\t\tthis.mydmx.universe.updateAll(0);\r\n\t\t/** only for testing of channel assignments\r\n\t\t// Keller 2-5\r\n\t\tthis.mydmx.universe.update({2: 90, 3: 15, 4: 255, 5 : 25});\r\n\t\t// OG 6-9\r\n\t\tthis.mydmx.universe.update({6: 90, 7: 15, 8: 255, 9 : 25});\r\n\t\t// K\u00FCche 10-13\r\n\t\tthis.mydmx.universe.update({10: 90, 11: 15, 12: 255, 13 : 25});\r\n\t\t// Party 16-18, Terasse 19-21\r\n\t\tthis.log.info(\"on\");\r\n\t\t*/\r\n\r\n\r\n\r\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n\t\t// this.config:\r\n\t\t//LIMIT the number of DMX channels max. 224 usable with ioBroker\r\n\t\tif (this.config.channels_used >224) {this.config.channels_used = 224}\r\n\t\tif (this.config.channels_used <0) {this.config.channels_used = 1}\r\n\r\n\t\tthis.log.debug(\"config option1: \" + this.config.device);\r\n\t\tthis.log.debug(\"config option3: \" + this.config.driver);\r\n\t\tthis.log.debug(\"config option4: \" + this.config.channels_used);\r\n\r\n\t    // we are ready, let's set the connection indicator\r\n\t\tthis.setState(\"info.connection\", true, true);\r\n\t\t//offen Check driver/Device\r\n\r\n\t\t//Initialize ioBrokers state objects if they dont exist\r\n\t\t//DMX CHANNELS contain and send DMX value 0-255 to a DMX channel\r\n\t\t// for (i=1;i<=DMX_CHANNELS_USED;i++){\r\n\t\tfor (let i = 0; i <= this.config.channels_used ; i++) {\r\n\t\t// for (i:Number =1;i<=21;i++){\r\n\t\t\tthis.setObjectNotExists (this.GetDMX (i),{\r\n\t\t\t\ttype:\"state\",\r\n\t\t\t\tcommon:{name:\"DMX channel \"+i ,type:\"number\",role:\"value\",read:true,write:true},\r\n\t\t\t\tnative:{}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t// await this.setObjectNotExistsAsync(\"testVariable\", {\r\n\t\t// \ttype: \"state\",\r\n\t\t// \tcommon: {\r\n\t\t// \t\tname: \"testVariable\",\r\n\t\t// \t\ttype: \"boolean\",\r\n\t\t// \t\trole: \"indicator\",\r\n\t\t// \t\tread: true,\r\n\t\t// \t\twrite: true,\r\n\t\t// \t},\r\n\t\t// \tnative: {},\r\n\t\t// });\r\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n\t\t// this.subscribeStates(\"testVariable\");\r\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n\t\t// this.subscribeStates(\"lights.*\");\r\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n\t\tthis.subscribeStates(\"*\");\r\n\t\t// the variable testVariable is set to true as command (ack=false)\r\n\t\t// await this.setStateAsync(\"testVariable\", true);\r\n\t\t// same thing, but the value is flagged \"ack\"\r\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\r\n\t\t// await this.setStateAsync(\"testVariable\", { val: true, ack: true });\r\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\r\n\t\t// await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\r\n\t\t// // examples for the checkPassword/checkGroup functions\r\n\t\t// let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\r\n\t\t// this.log.info(\"check user admin pw iobroker: \" + result);\r\n\t\t// result = await this.checkGroupAsync(\"admin\", \"admin\");\r\n\t\t// this.log.info(\"check group user admin group admin: \" + result);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\t// clearTimeout(timeout1);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...\r\n\t\t\t// clearInterval(interval1);\r\n\t\t\tthis.mydmx?.universe?.close();\r\n\t\t\tthis.mydmx?.close();\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// var adaptername = this.name;\r\n\t\t\t//this.log.info(this.name);\r\n\t\t\t// The state was changed: state nodedmx.0.DMX010 changed: 100 (ack = false)\r\n\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t\t//const portstring:string = id.substring(this.name.length+3);\r\n\t\t\tconst portstring:string = id.substring(this.name.length);\r\n\t\t\tconst portnumber:number = parseInt(portstring.substring(3));\r\n\r\n\t\t\tthis.log.debug(`number ${portnumber}`);\r\n\t\t\tthis.log.debug(`value ${state.val}`);\r\n\r\n\t\t\t// this.mydmx.universe.update({11: state.val });\r\n\t\t\tthis.mydmx.universe.update({[portnumber]: state.val });\r\n\r\n\t\t\t//this.log.info(\"updated\");\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.debug(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate GetDMX (number:number):string {\r\n\t\tif (number <10) {return \"00\"+number;}\r\n\t\tif (number <100) {return \"0\"+number;}\r\n\t\treturn \"\"+number;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Nodedmx2(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Nodedmx2())();\r\n}"],
  "mappings": "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",
  "names": ["DMX"]
}
